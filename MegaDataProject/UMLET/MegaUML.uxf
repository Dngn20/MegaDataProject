<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<diagram program="umlet" version="14.2">
  <zoom_level>6</zoom_level>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>792</x>
      <y>498</y>
      <w>294</w>
      <h>150</h>
    </coordinates>
    <panel_attributes>BiDirectionalNode&lt;Type&gt;
--
- nodeData : Type
- previous : BiDirectional&lt;Type&gt; *
- next : BiDirectionalNode&lt;Type&gt; *
--
+ BiDirectionalNode() : constructor
+ BiDirectionalNode(Type data) : constructor
+ BiDirectionalNode(Type dtata, BiDirectionalNode&lt;Type&gt; * previous, 
BiDirectionalNode&lt;Type&gt; * next) : constructor 

+ getNodeData() : Type
+ setNodeData(Type data) : void
+ getPreviousNode() : BiDirectionalNode&lt;Type&gt; *
+ getNextNode() : BiDirectionalNode&lt;Type&gt; *
+ setNextNode(BiDirectionalNode&lt;Type&gt; * next): void
bg=pink</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1074</x>
      <y>120</y>
      <w>186</w>
      <h>102</h>
    </coordinates>
    <panel_attributes>Timer
--

--
-clock_t executionTime;
+void startTimer();
+void stopTimer();
+void resetTimer();
+void displayTimerInformation();
+long getExecutionTimeinMircoseconds();
bg=#3c8b90
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1296</x>
      <y>102</y>
      <w>228</w>
      <h>120</h>
    </coordinates>
    <panel_attributes>IntNode
--
- nodeData:int 
- nodePointer : IntNode *
--
//gets/sets
+ getNodeData() : int
+ getNodePointer() : IntNode *
+ setNodeData(int) value : void
+ setNodePointer(IntNode * next) : void

+ IntNode() : constructor
+ IntNode(int value) : init
+ IntNode(int value, IntNode * nextNode) : constructor
bg=blue
group=1</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1590</x>
      <y>120</y>
      <w>168</w>
      <h>90</h>
    </coordinates>
    <panel_attributes>IntNodeArray
--
- size : int 
- front : IntNode * 
--
+ IntNodeArray(int size) : constructor
+ setAtIndex(int index, int value) : void
+ getFromIndex(int index) : int
+ getSize() : int
group=1</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLNote</id>
    <coordinates>
      <x>822</x>
      <y>102</y>
      <w>186</w>
      <h>24</h>
    </coordinates>
    <panel_attributes>Created by yours truely Duncan Nguyen
Denken wuz heer
bg=blue</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>864</x>
      <y>306</y>
      <w>252</w>
      <h>144</h>
    </coordinates>
    <panel_attributes>Node&lt;Type&gt;
--
Data Members
- nodeData : Type
- nodePointer : Node&lt;Type&gt; *

--
Constructors
+ Node() : constructor
+ Node(Type Value) : contructor
+ Node(Type data, Node&lt;Type&gt; * pointer) : constructor
Methods
+ getNodeData() : Type
+ getNodePointer() : Node&lt;Type&gt; *
+ setNodeData(Type data) : void
+ setNodePointer(Node&lt;Type&gt; * next): void 
bg=pink</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLPackage</id>
    <coordinates>
      <x>1296</x>
      <y>90</y>
      <w>474</w>
      <h>132</h>
    </coordinates>
    <panel_attributes>Type Sample
--
bg=yellow
group=1
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1182</x>
      <y>294</y>
      <w>318</w>
      <h>186</h>
    </coordinates>
    <panel_attributes>Array &lt;Type&gt;
--
Data Members
- front : Node&lt;Type&gt; *
- size : int

--
Constructors
+ Array() : constructor
+ Array(int size) : contructor

Advanced
+ ~Array&lt;Type&gt; () : destructor
+ ~Array&lt;Type&gt;(const Array&lt;Type&gt; &amp; toBeCopied): copy constructor

Methods 
+ getSize() : int
+ setAtIndex(int index, Type value) : void
+ getFromIndex(int index) : Type
bg=magenta</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1506</x>
      <y>174</y>
      <w>96</w>
      <h>24</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-
m2=1..n</panel_attributes>
    <additional_attributes>10.0;10.0;140.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1110</x>
      <y>378</y>
      <w>84</w>
      <h>24</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-
m2=1..n</panel_attributes>
    <additional_attributes>120.0;10.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1512</x>
      <y>300</y>
      <w>258</w>
      <h>180</h>
    </coordinates>
    <panel_attributes>Model:: List&lt;Type&gt;
--
- size : int
- front : Node&lt;Type&gt; *
- end : Node&lt;Type&gt; *
--
+ List&lt;Type&gt;() L constructor
+ List&lt;Type&gt;(constList&lt;Type&gt; &amp; source): copy constructor
+ ~List&lt;Type&gt;(): destructor

+ addAtIndex(int index, Type value): void
+ add(Type value): void
+ remove(int index): Type
+ setAtIndex(int index): Type
+ contains(Type data): bool
+ getSize() const : int
+ getFront() const: Node&lt;Type&gt; *
+ getEnd() const : Node&lt;Type&gt; * 
bg=pink</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1086</x>
      <y>444</y>
      <w>498</w>
      <h>138</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-
m2=0..n</panel_attributes>
    <additional_attributes>810.0;60.0;810.0;210.0;10.0;210.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1122</x>
      <y>786</y>
      <w>114</w>
      <h>66</h>
    </coordinates>
    <panel_attributes>Queue
--
- front: BiDirectionalNode&lt;Type&gt; *
- end: BiDirectionalNode&lt;Type&gt; *
- size: int
--
+ add(Type data) : void
+ remove(int index) : Type

+ Queue(): constructor
+ Queue(): ~destructor

+ enqueue(Type data): void
+ dequeue() : Type
+ peek(): Type
bg=pink</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>930</x>
      <y>444</y>
      <w>18</w>
      <h>66</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;90.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1176</x>
      <y>594</y>
      <w>294</w>
      <h>150</h>
    </coordinates>
    <panel_attributes>DoubllyLinkedList&lt;Type&gt;
--
- front : BiDirectionalNode&lt;Type&gt; *
- end : BiDirectional&lt;Type&gt; *
- size : int
--
Non virtual methods
+ getSize() const : int
+ getFront() const : BiDirectionalNode&lt;Type&gt; *
+ getEnd() const : BiDirectionalNode&lt;Type&gt; *

virtual methods
+ add(Type value)
+ remove(int)
bg=pink</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>870</x>
      <y>642</y>
      <w>318</w>
      <h>54</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-
m2=0..n
fg=blue
lw=2
</panel_attributes>
    <additional_attributes>510.0;70.0;10.0;70.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1254</x>
      <y>786</y>
      <w>168</w>
      <h>156</h>
    </coordinates>
    <panel_attributes>Stack
--
front: BiDirectionalNode&lt;Type&gt; *
end: BiDirectionalNode&lt;Type&gt; * 
size: int
--
+Stack() : constructor
+ ~Stack() destructor

+ push(Type data): void
+ pop() : Type
+ peek(): Type

+ add(Type data): void
+ remove(int index): Type
bg=pink</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1446</x>
      <y>780</y>
      <w>180</w>
      <h>90</h>
    </coordinates>
    <panel_attributes>CircularlyLinkedList
--
- front : BiDirectionalNode &lt;Type&gt; * 
- end: BiDirectionalNode&lt;Type&gt; *
--
+ add(Type) : void
+ addAtIndex(int index, Type data) : void

+ CircularList(): constructor
+ ~CircularList(): destructor
bg=pink</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1170</x>
      <y>738</y>
      <w>18</w>
      <h>60</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;.</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;80.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1464</x>
      <y>738</y>
      <w>66</w>
      <h>54</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;.</panel_attributes>
    <additional_attributes>10.0;10.0;90.0;70.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1302</x>
      <y>738</y>
      <w>18</w>
      <h>60</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;.</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;80.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>78</x>
      <y>600</y>
      <w>342</w>
      <h>234</h>
    </coordinates>
    <panel_attributes>Graph
--
static const int Maximum = 20;
bool adjacencyMatrix[MAXIMUM][MAXIMUM];
Type graphData[MAXIMUM];
int vertexCount;
void depthFirstTraversal(Graph&lt;Type&gt; graph, int vertex,bool markedVertices);
--
Graph();
~Graph();

void addVertex(const Type&amp; value);
void addEdge(int souce, int target);
void removeEdge(int source, int target);
Type&amp; operator [](int vertex);
Type operator[](int vertex) const;
int size() const;
bool areConnected(int source, int target) const;
bool hasUndirectedConnection(int source, int target) const;
std::set&lt;int&gt; neighbors(int vertex) const;
void depthFirstTraversal(Graph&lt;Type&gt; graph, int vertex);
void breadthFirstTraversal(Graph&lt;graph&gt; graph, int vertex);

bg=blue</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>414</x>
      <y>300</y>
      <w>288</w>
      <h>180</h>
    </coordinates>
    <panel_attributes>BinarySearchTreeNode&lt;Type&gt;
--
- nodeData : Type (note inherited)
- rootPointer : BinarySearchTreeNode&lt;Type&gt; *
- leftChildPointer : BinarySearchTreeNode&lt;Type&gt; * 
- rightchildPointer : BinarySearchTreeNode&lt;Type&gt; *
--
Constructors
+ BinarySearchTreeNode() : constructor
+ BinarySearchNode(Type data) : constructor
Methods
+ getRootPointer() : BnarySearchTree&lt;Type&gt; * 
+ getLeftChildPointer() : BinarySearchTreeNode&lt;Type&gt; *
+ getRightChildPointer() : BinarySearchTreeNodeM&lt;Type&gt; *

 + setRootChildPointer(BanrySearchTreeNode&lt;Type&gt; * root) : void
 + setLeftChildPointer(BinarySearchTreeNode&lt;Type&gt; * left) : void
 + setRightChildPointer(BinarySearchTreeNode(&lt;Type&gt; *  right) : void 
bg=pink</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>114</x>
      <y>282</y>
      <w>186</w>
      <h>210</h>
    </coordinates>
    <panel_attributes>Model :: Tree&lt;Type&gt;
--
- getSize() : int
- getHeight() : int
- getComplete() : bool
- getBalanced() : bool
--

+ insert(Type) : void
+ order(Type) : void
+ 
+ 

Traversals
+ inOrderTraversal() : void
+ preOrerTraversal() : void
+ postOrderTraversal() : void
bg=pink</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>456</x>
      <y>546</y>
      <w>294</w>
      <h>282</h>
    </coordinates>
    <panel_attributes>Model :: BinarySearchTree&lt;Type&gt;
--
- root : BinarySearchTreeNode&lt;Type&gt; * 
- size : int(inherited)
- height : int(inherited)
- complete : bool(inherited)
- balanced : bool(inherited)
--
+ BinarySearchTree() : constructor
+ ~BinarySearchTree() : destructor

+ getRoot() : BinarySearchTreeNode&lt;Type&gt; * 
+ setRoo(BinarySearchTreeNode&lt;Type&gt;  * root): void

- calculateSize(BinarySearchTreeNode&lt;Type&gt; * ) : int

- inOrderTraversal(BinarySearchTreeNode&lt;Type&gt; *) : void
- preOrderTrasversal(BinarySearchTreeNode&lt;Type&gt; * ): void
- postOrderTrasversal(BinarySearchTreeNode&lt;Type&gt; * ): void

+inOrderTraversal() :void
+ preOrderTraversal() : void 
+ postOrderTranversal() : void 
+ printToFile() : void

+ insert(Type) : void
+ contains(Type) : void
+ remove(Type) : void

+ demoTraversalSteps(BinarySearchTreeNode&lt;Type&gt; * ): void
bg=pink</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>726</x>
      <y>144</y>
      <w>174</w>
      <h>120</h>
    </coordinates>
    <panel_attributes>HashNode
--
-Type data;
-long key;

--
+HashNode();
+HashNode(Type data);
    
+Type getData();
+long getKey() const;
+void setData(Type data);

bg=yellow</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>366</x>
      <y>96</y>
      <w>288</w>
      <h>174</h>
    </coordinates>
    <panel_attributes>HashTable
--
long capacity;
long size;
double efficiencyPercentage;
HashNode&lt;Type&gt; ** hashTableStorage;
bool isPrime(long sampleNumber);
void resize();
long nextPrime()
long findPosition(Hash&lt;Type&gt; * data)
long handleCollision(HashNode&lt;Type&gt; * data, long currentPosition);
--
Hashtable();
`HashTable();
void add(Type data);
bool remove(Type data);
void displayContent();
long getSize();

bg=green</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>156</x>
      <y>150</y>
      <w>114</w>
      <h>84</h>
    </coordinates>
    <panel_attributes>Title
--
Data here
--
Construstor 
Methods</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>696</x>
      <y>402</y>
      <w>180</w>
      <h>18</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;280.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>648</x>
      <y>474</y>
      <w>18</w>
      <h>84</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;120.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>738</x>
      <y>258</y>
      <w>144</w>
      <h>96</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;140.0;220.0;140.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>0</x>
      <y>0</y>
      <w>114</w>
      <h>18</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;170.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>648</x>
      <y>204</y>
      <w>90</w>
      <h>18</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;130.0;10.0</additional_attributes>
  </element>
</diagram>
